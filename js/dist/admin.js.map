{"version":3,"file":"admin.js","mappings":"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","sources":["webpack://@afrux/top-posters-widget/webpack/bootstrap","webpack://@afrux/top-posters-widget/webpack/runtime/compat get default export","webpack://@afrux/top-posters-widget/webpack/runtime/define property getters","webpack://@afrux/top-posters-widget/webpack/runtime/hasOwnProperty shorthand","webpack://@afrux/top-posters-widget/external root \"flarum.core.compat['admin/app']\"","webpack://@afrux/top-posters-widget/external root \"flarum.core.compat['extensions/afrux-forum-widgets-core/common/extend/Widgets']\"","webpack://@afrux/top-posters-widget/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@afrux/top-posters-widget/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@afrux/top-posters-widget/external root \"flarum.core.compat['common/app']\"","webpack://@afrux/top-posters-widget/external root \"flarum.core.compat['common/components/LoadingIndicator']\"","webpack://@afrux/top-posters-widget/external root \"flarum.core.compat['common/helpers/avatar']\"","webpack://@afrux/top-posters-widget/external root \"flarum.core.compat['common/helpers/icon']\"","webpack://@afrux/top-posters-widget/external root \"flarum.core.compat['extensions/afrux-forum-widgets-core/common/components/Widget']\"","webpack://@afrux/top-posters-widget/external root \"flarum.core.compat['common/components/Link']\"","webpack://@afrux/top-posters-widget/./src/common/components/TopPostersWidget.tsx","webpack://@afrux/top-posters-widget/external root \"flarum.core.compat['admin/components/ExtensionPage']\"","webpack://@afrux/top-posters-widget/external root \"flarum.core.compat['common/models/Group']\"","webpack://@afrux/top-posters-widget/./src/admin/components/TopPostersSettingsPage.tsx","webpack://@afrux/top-posters-widget/./src/admin/index.ts","webpack://@afrux/top-posters-widget/./src/common/registerWidget.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['admin/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['extensions/afrux-forum-widgets-core/common/extend/Widgets'];","function _setPrototypeOf(t, e) {\n  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n    return t.__proto__ = e, t;\n  }, _setPrototypeOf(t, e);\n}\nexport { _setPrototypeOf as default };","import setPrototypeOf from \"./setPrototypeOf.js\";\nfunction _inheritsLoose(t, o) {\n  t.prototype = Object.create(o.prototype), t.prototype.constructor = t, setPrototypeOf(t, o);\n}\nexport { _inheritsLoose as default };","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/LoadingIndicator'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/avatar'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/icon'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['extensions/afrux-forum-widgets-core/common/components/Widget'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Link'];","import app from 'flarum/common/app';\nimport type Mithril from 'mithril';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport avatar from 'flarum/common/helpers/avatar';\nimport icon from 'flarum/common/helpers/icon';\nimport Widget from 'flarum/extensions/afrux-forum-widgets-core/common/components/Widget';\nimport type User from 'flarum/common/models/User';\nimport Link from 'flarum/common/components/Link';\n\nexport default class TopPostersWidget extends Widget {\n  private monthlyCounts!: any;\n\n  oninit(vnode: Mithril.Vnode): void {\n    super.oninit(vnode);\n\n    this.monthlyCounts = app.forum.attribute('afrux-top-posters-widget.topPosterCounts');\n    this.loadWithInitialResponse = app.forum.attribute('afrux-forum-widgets-core.preferDataWithInitialLoad');\n    this.attrs.state.users ??= [];\n    this.attrs.state.isLoading ??= true;\n    this.attrs.state.hasLoaded ??= false;\n  }\n\n  oncreate(vnode: Mithril.Vnode): void {\n    super.oncreate(vnode);\n\n    if (!this.attrs.state.hasLoaded) {\n      setTimeout(this.load.bind(this), this.loadWithInitialResponse ? 0 : 800);\n    }\n  }\n\n  className(): string {\n    return 'Afrux-TopPostersWidget';\n  }\n\n  icon(): string {\n    return 'fas fa-sort-numeric-down';\n  }\n\n  title(): string {\n    return app.translator.trans('afrux-top-posters-widget.forum.widget.title');\n  }\n\n  description(): string {\n    return '';\n  }\n\n  content(): Mithril.Children {\n    if (this.attrs.state.isLoading) {\n      return <LoadingIndicator />;\n    }\n\n    const users = this.attrs.state.users.sort((a: User, b: User) => this.monthlyCounts[b.id()] - this.monthlyCounts[a.id()]);\n\n    return (\n      <div className=\"Afrux-TopPostersWidget-users\">\n        {users.map((user: User) => (\n          <Link href={app.route('user', { username: user.slug() })} className=\"Afrux-TopPostersWidget-users-item\">\n            <div className=\"Afrux-TopPostersWidget-users-item-avatar\">{avatar(user)}</div>\n              <div className=\"Afrux-TopPostersWidget-users-item-content\">\n                <div className=\"Afrux-TopPostersWidget-users-item-name\">{user.displayName()}</div>\n                <div className=\"Afrux-TopPostersWidget-users-item-value\">\n                  {icon('fas fa-comment-dots')} {this.monthlyCounts[user.id()]}\n                </div>\n              </div>\n          </Link>\n        ))}\n      </div>\n    );\n  }\n\n  load(): void {\n    if (this.loadWithInitialResponse) {\n      this.setResults(app.forum.topPosters());\n\n      return;\n    }\n\n    this.attrs.state.isLoading = true;\n\n    app.store.find('users', { filter: { top_poster: true } }).then((users: User[]) => {\n      this.setResults(users);\n    });\n  }\n\n  setResults(users) {\n    this.attrs.state.users = users;\n    this.attrs.state.isLoading = false;\n    this.attrs.state.hasLoaded = true;\n    m.redraw();\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['admin/components/ExtensionPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Group'];","import app from 'flarum/admin/app';\nimport ExtensionPage from 'flarum/admin/components/ExtensionPage';\nimport Group from 'flarum/common/models/Group';\nimport icon from 'flarum/common/helpers/icon';\nimport type Mithril from 'mithril';\n\nexport default class TopPostersSettingsPage extends ExtensionPage {\n  oninit(vnode: Mithril.Vnode) {\n    super.oninit(vnode);\n\n    // Initialize the selected groups with an empty array or the saved settings\n    this.selected = this.setting('afrux-top-posters-widget.excludeGroups', '[]');\n  }\n\n  content() {\n    // Parse the selected group IDs from the settings\n    const selectedGroupIds = JSON.parse(this.selected());\n\n    return [\n      <div className=\"container\">\n        <div className=\"TopPostersSettingsPage\">\n          <div className=\"Form-group\">\n            <h4>{app.translator.trans('afrux-top-posters-widget.admin.settings.info')}</h4>\n\n            {app.store\n              .all<Group>('groups')\n              .filter((g: Group) => g.id() !== Group.GUEST_ID)\n              .map((g: Group) => (\n                <div>\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      checked={selectedGroupIds.includes(g.id())}\n                      onchange={(event: Event) => {\n                        const checkbox = event.target as HTMLInputElement;\n                        if (checkbox.checked) {\n                          selectedGroupIds.push(g.id());\n                        } else {\n                          const index = selectedGroupIds.indexOf(g.id());\n                          if (index !== -1) {\n                            selectedGroupIds.splice(index, 1);\n                          }\n                        }\n                        // Update the setting with the new selected groups\n                        this.selected(JSON.stringify(selectedGroupIds));\n                      }}\n                    />\n                    {icon(g.icon() || 'fas fa-user')}{g.namePlural()}\n                  </label>\n                </div>\n              ))}\n          </div>\n          {this.submitButton()}\n        </div>\n      </div>,\n    ];\n  }\n}\n","import app from 'flarum/admin/app';\nimport registerWidget from '../common/registerWidget';\nimport TopPostersSettingsPage from './components/TopPostersSettingsPage';\n\napp.initializers.add('afrux/top-posters-widget', () => {\n  app.extensionData.for('afrux-top-posters-widget').registerPage(TopPostersSettingsPage);\n  registerWidget(app);\n});\n","import Application from 'flarum/common/Application';\nimport Widgets from 'flarum/extensions/afrux-forum-widgets-core/common/extend/Widgets';\n\nimport TopPostersWidget from './components/TopPostersWidget';\n\nexport default function (app: Application) {\n  new Widgets()\n    .add({\n      key: 'topPosters',\n      component: TopPostersWidget,\n      isDisabled: () => {\n        const loadWithInitialResponse = app.forum.attribute('afrux-forum-widgets-core.preferDataWithInitialLoad');\n        const monthlyCounts = app.forum.attribute('afrux-top-posters-widget.topPosterCounts');\n\n        return (!loadWithInitialResponse && !app.forum.attribute('canSearchUsers')) || !monthlyCounts || !Object.keys(monthlyCounts).length;\n      },\n      isUnique: true,\n      placement: 'end',\n      position: 3,\n    })\n    .extend(app, 'afrux-top-posters-widget');\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","flarum","core","compat","_setPrototypeOf","t","e","setPrototypeOf","bind","__proto__","_inheritsLoose","create","constructor","TopPostersWidget","_Widget","_this","_len","arguments","length","args","Array","_key","apply","concat","monthlyCounts","_proto","oninit","vnode","_this$attrs$state","_this$attrs$state2","_this$attrs$state3","this","app","attribute","loadWithInitialResponse","attrs","state","users","isLoading","hasLoaded","oncreate","setTimeout","load","className","icon","title","trans","description","content","_this2","m","LoadingIndicator","sort","b","id","map","user","Link","href","username","slug","avatar","displayName","_this3","setResults","topPosters","find","filter","top_poster","then","redraw","Widget","TopPostersSettingsPage","_ExtensionPage","selected","setting","selectedGroupIds","JSON","parse","all","g","Group","type","checked","includes","onchange","event","target","push","index","indexOf","splice","stringify","namePlural","submitButton","ExtensionPage","add","registerPage","Widgets","component","isDisabled","forum","keys","isUnique","placement","position","extend"],"sourceRoot":""}